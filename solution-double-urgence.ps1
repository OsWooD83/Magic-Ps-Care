# Solution d'urgence pour GitHub Pages et nouveau Vercel
Write-Host "üö® SOLUTION DOUBLE URGENCE" -ForegroundColor Red
Write-Host "=========================" -ForegroundColor Yellow

Write-Host "`nüìä PROBL√àMES IDENTIFI√âS:" -ForegroundColor Red
Write-Host "‚ùå GitHub Pages: 404 - Pages non activ√©es" -ForegroundColor Red
Write-Host "‚ùå Vercel: 401 - Projet priv√©" -ForegroundColor Red

Write-Host "`nüéØ SOLUTIONS IMM√âDIATES:" -ForegroundColor Green

Write-Host "`n1. üöÄ Test du nouveau projet Vercel..." -ForegroundColor Cyan
$newVercelName = "tw-pascal-public-0712-0114"
$possibleUrls = @(
    "https://$newVercelName.vercel.app",
    "https://$newVercelName-association-ps-cares-projects.vercel.app",
    "https://$newVercelName-oswood83.vercel.app"
)

$foundWorkingUrl = $null

foreach ($url in $possibleUrls) {
    Write-Host "`n   üîç Test: $url" -ForegroundColor Yellow
    
    try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 10
        
        if ($response.StatusCode -eq 200) {
            Write-Host "   üéâ SUCC√àS! Status: 200" -ForegroundColor Green
            $foundWorkingUrl = $url
            break
        } else {
            Write-Host "   ‚ö†Ô∏è  Status: $($response.StatusCode)" -ForegroundColor Yellow
        }
        
    } catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        if ($statusCode -eq 401) {
            Write-Host "   ‚ùå 401 - Encore priv√©" -ForegroundColor Red
        } elseif ($statusCode -eq 404) {
            Write-Host "   ‚ùå 404 - Projet non trouv√©" -ForegroundColor Red
        } else {
            Write-Host "   ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

Write-Host "`n2. üîß Correction GitHub Pages..." -ForegroundColor Cyan

# V√©rifier que nous avons un fichier index.html √† la racine
if (Test-Path "index.html") {
    Write-Host "   ‚úÖ index.html trouv√© √† la racine" -ForegroundColor Green
} else {
    Write-Host "   ‚ùå index.html manquant √† la racine" -ForegroundColor Red
}

# Cr√©er un fichier .nojekyll pour GitHub Pages
Write-Host "`n   üìù Cr√©ation du fichier .nojekyll..." -ForegroundColor Yellow
"" | Out-File -FilePath ".nojekyll" -Encoding UTF8
Write-Host "   ‚úÖ Fichier .nojekyll cr√©√©" -ForegroundColor Green

# Forcer le commit et push
Write-Host "`n   üì§ Commit et push pour GitHub Pages..." -ForegroundColor Yellow
try {
    git add .nojekyll 2>&1 | Out-Null
    git commit -m "Add .nojekyll for GitHub Pages" 2>&1 | Out-Null
    git push origin main 2>&1 | Out-Null
    Write-Host "   ‚úÖ Push effectu√©" -ForegroundColor Green
} catch {
    Write-Host "   ‚ö†Ô∏è  Erreur git: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host "`n3. üåê V√©rification GitHub Pages..." -ForegroundColor Cyan

$githubPagesUrls = @(
    "https://oswood83.github.io/association-Magic-Ps-Care/",
    "https://OsWooD83.github.io/association-Magic-Ps-Care/",
    "https://oswood83.github.io/association-Magic-Ps-Care/index.html"
)

foreach ($pageUrl in $githubPagesUrls) {
    Write-Host "`n   üîç Test: $pageUrl" -ForegroundColor Yellow
    
    try {
        $pageResponse = Invoke-WebRequest -Uri $pageUrl -UseBasicParsing -TimeoutSec 10
        
        if ($pageResponse.StatusCode -eq 200) {
            Write-Host "   üéâ GitHub Pages FONCTIONNE! Status: 200" -ForegroundColor Green
            $foundWorkingUrl = $pageUrl
            break
        } else {
            Write-Host "   ‚ö†Ô∏è  Status: $($pageResponse.StatusCode)" -ForegroundColor Yellow
        }
        
    } catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        if ($statusCode -eq 404) {
            Write-Host "   ‚ùå 404 - Pages non activ√©es encore" -ForegroundColor Red
        } else {
            Write-Host "   ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

Write-Host "`n4. üîÑ Nouveau d√©ploiement Vercel forc√©..." -ForegroundColor Cyan
try {
    Write-Host "   üöÄ D√©ploiement en cours..." -ForegroundColor Yellow
    $deployResult = vercel --prod --yes --force 2>&1
    
    if ($deployResult -like "*deployed*") {
        Write-Host "   ‚úÖ Nouveau d√©ploiement r√©ussi!" -ForegroundColor Green
        
        # Extraire l'URL du d√©ploiement
        $deployUrls = $deployResult | Select-String -Pattern "https://.*\.vercel\.app" -AllMatches
        if ($deployUrls) {
            $latestUrl = $deployUrls | Select-Object -Last 1 | ForEach-Object { $_.Matches.Value }
            Write-Host "   üåê Nouvelle URL: $latestUrl" -ForegroundColor Cyan
            
            # Test imm√©diat
            Start-Sleep -Seconds 3
            try {
                $testNewUrl = Invoke-WebRequest -Uri $latestUrl -UseBasicParsing -TimeoutSec 10
                if ($testNewUrl.StatusCode -eq 200) {
                    Write-Host "   üéâ NOUVEAU VERCEL FONCTIONNE!" -ForegroundColor Green
                    $foundWorkingUrl = $latestUrl
                }
            } catch {
                Write-Host "   ‚ö†Ô∏è  Nouveau Vercel encore en cours..." -ForegroundColor Yellow
            }
        }
    }
} catch {
    Write-Host "   ‚ö†Ô∏è  Erreur d√©ploiement: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host "`nüèÜ R√âSULTAT FINAL:" -ForegroundColor Green
Write-Host "==================" -ForegroundColor Green

if ($foundWorkingUrl) {
    Write-Host "üéâ SOLUTION TROUV√âE!" -ForegroundColor Green
    Write-Host "‚úÖ URL fonctionnelle: $foundWorkingUrl" -ForegroundColor Cyan
    
    # Sauvegarder
    $foundWorkingUrl | Out-File -FilePath "URL_FINALE_FONCTIONNELLE.txt" -Encoding UTF8
    Write-Host "üíæ URL sauvegard√©e dans: URL_FINALE_FONCTIONNELLE.txt" -ForegroundColor Green
    
} else {
    Write-Host "‚ö†Ô∏è  AUCUNE SOLUTION IMM√âDIATE TROUV√âE" -ForegroundColor Yellow
    
    Write-Host "`nüìã ACTIONS MANUELLES REQUISES:" -ForegroundColor Red
    Write-Host "1. GitHub Pages:" -ForegroundColor Cyan
    Write-Host "   - Allez sur: https://github.com/OsWooD83/association-Magic-Ps-Care/settings/pages" -ForegroundColor White
    Write-Host "   - Activez 'Deploy from a branch'" -ForegroundColor White
    Write-Host "   - S√©lectionnez 'main' et '/ (root)'" -ForegroundColor White
    Write-Host "   - Attendez 5-10 minutes" -ForegroundColor White
    
    Write-Host "`n2. Vercel Dashboard:" -ForegroundColor Cyan
    Write-Host "   - Allez sur: https://vercel.com/dashboard" -ForegroundColor White
    Write-Host "   - Trouvez le projet '$newVercelName'" -ForegroundColor White
    Write-Host "   - Settings ‚Üí Privacy ‚Üí Public" -ForegroundColor White
}

Write-Host "`n‚ú® Solution d'urgence termin√©e!" -ForegroundColor Green

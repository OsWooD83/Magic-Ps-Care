#!/usr/bin/env pwsh

# Script de d√©ploiement conditionnel pour Vercel
# Ne d√©ploie que si tous les tests API passent

Write-Host "üöÄ Script de d√©ploiement conditionnel PS Care" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan

# V√©rifier si Node.js est install√©
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n'est pas install√© ou accessible" -ForegroundColor Red
    exit 1
}

# V√©rifier si Vercel CLI est install√©
try {
    $vercelVersion = vercel --version
    Write-Host "‚úÖ Vercel CLI d√©tect√©: $vercelVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Vercel CLI non d√©tect√©, installation..." -ForegroundColor Yellow
    npm install -g vercel
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec de l'installation de Vercel CLI" -ForegroundColor Red
        exit 1
    }
}

Write-Host "`nüîç √âtape 1: V√©rification de la structure du projet" -ForegroundColor Yellow

# V√©rifier les fichiers essentiels
$requiredFiles = @(
    "api/index.js",
    "vercel.json",
    "package.json",
    "index.html"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
        exit 1
    }
}

Write-Host "`nüß™ √âtape 2: Test des APIs en local" -ForegroundColor Yellow

# D√©marrer le serveur local en arri√®re-plan
Write-Host "D√©marrage du serveur local..." -ForegroundColor Cyan
$serverProcess = Start-Process -FilePath "node" -ArgumentList "server-local.js" -PassThru -WindowStyle Hidden

# Attendre que le serveur d√©marre
Start-Sleep -Seconds 3

try {
    # Tester si le serveur r√©pond
    $testUrl = "http://localhost:3000/api/health"
    $response = Invoke-RestMethod -Uri $testUrl -Method Get -TimeoutSec 10
    
    if ($response.success) {
        Write-Host "‚úÖ Serveur local actif" -ForegroundColor Green
        
        # Ex√©cuter les tests complets
        Write-Host "Ex√©cution des tests API..." -ForegroundColor Cyan
        $testResult = node test-all-apis.js
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Tous les tests API sont pass√©s avec succ√®s!" -ForegroundColor Green
            $deployReady = $true
        } else {
            Write-Host "‚ùå Certains tests API ont √©chou√©" -ForegroundColor Red
            Write-Host $testResult
            $deployReady = $false
        }
    } else {
        Write-Host "‚ùå Serveur local ne r√©pond pas correctement" -ForegroundColor Red
        $deployReady = $false
    }
} catch {
    Write-Host "‚ùå Impossible de se connecter au serveur local" -ForegroundColor Red
    Write-Host "Erreur: $_" -ForegroundColor Red
    $deployReady = $false
} finally {
    # Arr√™ter le serveur local
    if ($serverProcess -and !$serverProcess.HasExited) {
        Stop-Process -Id $serverProcess.Id -Force
        Write-Host "üõë Serveur local arr√™t√©" -ForegroundColor Yellow
    }
}

if (-not $deployReady) {
    Write-Host "`n‚ö†Ô∏è  D√âPLOIEMENT ANNUL√â" -ForegroundColor Red
    Write-Host "Les tests API ont √©chou√©. Veuillez corriger les erreurs avant de d√©ployer." -ForegroundColor Red
    exit 1
}

Write-Host "`nüöÄ √âtape 3: D√©ploiement vers Vercel" -ForegroundColor Yellow

# V√©rifier si l'utilisateur est connect√© √† Vercel
try {
    $vercelUser = vercel whoami
    Write-Host "‚úÖ Connect√© √† Vercel en tant que: $vercelUser" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Non connect√© √† Vercel, connexion..." -ForegroundColor Yellow
    vercel login
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå √âchec de la connexion √† Vercel" -ForegroundColor Red
        exit 1
    }
}

# D√©ployer vers Vercel
Write-Host "D√©ploiement en cours..." -ForegroundColor Cyan
$deployOutput = vercel --prod --yes 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "`nüéâ D√âPLOIEMENT R√âUSSI!" -ForegroundColor Green
    
    # Extraire l'URL de d√©ploiement
    $deployUrl = ($deployOutput | Select-String -Pattern "https://.*\.vercel\.app" | Select-Object -First 1).Matches.Value
    
    if ($deployUrl) {
        Write-Host "üåê URL de production: $deployUrl" -ForegroundColor Cyan
        
        # Attendre que le d√©ploiement soit propag√©
        Write-Host "`n‚è≥ Attente de la propagation du d√©ploiement..." -ForegroundColor Yellow
        Start-Sleep -Seconds 10
        
        # Tester l'API en production
        Write-Host "`nüß™ Test rapide de l'API en production..." -ForegroundColor Yellow
        try {
            $prodResponse = Invoke-RestMethod -Uri "$deployUrl/api/health" -Method Get -TimeoutSec 15
            if ($prodResponse.success) {
                Write-Host "‚úÖ API en production fonctionne!" -ForegroundColor Green
                Write-Host "Environment: $($prodResponse.environment)" -ForegroundColor Cyan
                Write-Host "Timestamp: $($prodResponse.timestamp)" -ForegroundColor Cyan
            } else {
                Write-Host "‚ö†Ô∏è  API d√©ploy√©e mais r√©ponse inattendue" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ö†Ô∏è  Impossible de tester l'API en production imm√©diatement" -ForegroundColor Yellow
            Write-Host "Cela peut √™tre normal, essayez dans quelques minutes." -ForegroundColor Yellow
        }
        
        # Sauvegarder l'URL
        $deployUrl | Out-File -FilePath "DEPLOYMENT_URL.txt" -Encoding UTF8
        Write-Host "`nüìù URL sauvegard√©e dans DEPLOYMENT_URL.txt" -ForegroundColor Green
        
    } else {
        Write-Host "‚ö†Ô∏è  URL de d√©ploiement non d√©tect√©e dans la sortie" -ForegroundColor Yellow
    }
    
} else {
    Write-Host "`n‚ùå √âCHEC DU D√âPLOIEMENT" -ForegroundColor Red
    Write-Host $deployOutput -ForegroundColor Red
    exit 1
}

Write-Host "`nüéØ MISSION ACCOMPLIE!" -ForegroundColor Green
Write-Host "‚úÖ Tous les tests API sont pass√©s" -ForegroundColor Green
Write-Host "‚úÖ D√©ploiement Vercel r√©ussi" -ForegroundColor Green
Write-Host "‚úÖ API en production test√©e" -ForegroundColor Green

if ($deployUrl) {
    Write-Host "`nüîó Liens utiles:" -ForegroundColor Cyan
    Write-Host "   Site web: $deployUrl" -ForegroundColor White
    Write-Host "   API Health: $deployUrl/api/health" -ForegroundColor White
    Write-Host "   API Photos: $deployUrl/api/photos" -ForegroundColor White
    Write-Host "   Login Admin: $deployUrl/login.html" -ForegroundColor White
}

Write-Host "`nD√©ploiement termin√© avec succ√®s! üéâ" -ForegroundColor Green

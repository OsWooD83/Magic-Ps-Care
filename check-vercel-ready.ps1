# Script de v√©rification pr√©-d√©ploiement Vercel
# Usage: .\check-vercel-ready.ps1

Write-Host "üîç V√©rification de la pr√©paration au d√©ploiement Vercel..." -ForegroundColor Green

$errors = @()
$warnings = @()

# V√©rifier les fichiers essentiels
Write-Host "üìÅ V√©rification des fichiers essentiels..." -ForegroundColor Yellow

$requiredFiles = @(
    "package.json",
    "vercel.json",
    "api/index.js",
    "server.js",
    "index.html"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        $errors += "‚ùå Fichier manquant: $file"
    }
}

# V√©rifier la structure API
Write-Host "üîå V√©rification de la structure API..." -ForegroundColor Yellow

if (Test-Path "api") {
    $apiFiles = Get-ChildItem "api" -Filter "*.js"
    Write-Host "‚úÖ Dossier API pr√©sent avec $($apiFiles.Count) fichiers" -ForegroundColor Green
    
    foreach ($apiFile in $apiFiles) {
        Write-Host "  - $($apiFile.Name)" -ForegroundColor Cyan
    }
} else {
    $errors += "‚ùå Dossier API manquant"
}

# V√©rifier package.json
Write-Host "üì¶ V√©rification du package.json..." -ForegroundColor Yellow

if (Test-Path "package.json") {
    try {
        $packageContent = Get-Content "package.json" | ConvertFrom-Json
        
        # V√©rifier les scripts
        if ($packageContent.scripts.start) {
            Write-Host "‚úÖ Script 'start' d√©fini" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è Script 'start' manquant dans package.json"
        }
        
        # V√©rifier le type module
        if ($packageContent.type -eq "module") {
            Write-Host "‚úÖ Type 'module' configur√©" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è Type 'module' non configur√©"
        }
        
        # V√©rifier les d√©pendances essentielles
        $essentialDeps = @("express", "cors")
        foreach ($dep in $essentialDeps) {
            if ($packageContent.dependencies.$dep) {
                Write-Host "‚úÖ D√©pendance '$dep' pr√©sente" -ForegroundColor Green
            } else {
                $errors += "‚ùå D√©pendance manquante: $dep"
            }
        }
        
    } catch {
        $errors += "‚ùå Erreur lors de la lecture de package.json"
    }
}

# V√©rifier vercel.json
Write-Host "‚öôÔ∏è V√©rification du vercel.json..." -ForegroundColor Yellow

if (Test-Path "vercel.json") {
    try {
        $vercelConfig = Get-Content "vercel.json" | ConvertFrom-Json
        
        if ($vercelConfig.version -eq 2) {
            Write-Host "‚úÖ Version Vercel 2 configur√©e" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è Version Vercel non optimale"
        }
        
        if ($vercelConfig.functions) {
            Write-Host "‚úÖ Configuration des fonctions pr√©sente" -ForegroundColor Green
        } else {
            $warnings += "‚ö†Ô∏è Configuration des fonctions manquante"
        }
        
    } catch {
        $errors += "‚ùå Erreur lors de la lecture de vercel.json"
    }
}

# V√©rifier les variables d'environnement
Write-Host "üåç V√©rification des variables d'environnement..." -ForegroundColor Yellow

if (Test-Path ".env.example") {
    Write-Host "‚úÖ Fichier .env.example pr√©sent" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Fichier .env.example manquant (recommand√©)"
}

if (Test-Path ".env.production") {
    Write-Host "‚úÖ Fichier .env.production pr√©sent" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Fichier .env.production manquant"
}

# V√©rifier .vercelignore
Write-Host "üö´ V√©rification du .vercelignore..." -ForegroundColor Yellow

if (Test-Path ".vercelignore") {
    Write-Host "‚úÖ Fichier .vercelignore pr√©sent" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Fichier .vercelignore manquant (recommand√©)"
}

# Test syntaxique rapide
Write-Host "üîç Test syntaxique rapide..." -ForegroundColor Yellow

try {
    # Test de l'API principale
    node -e "
    try {
        import('./api/index.js').then(() => {
            console.log('‚úÖ API index.js valide');
        }).catch(err => {
            console.log('‚ùå Erreur API:', err.message);
            process.exit(1);
        });
    } catch (error) {
        console.log('‚ùå Erreur lors du test:', error.message);
        process.exit(1);
    }
    " 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Syntaxe API valide" -ForegroundColor Green
    } else {
        $errors += "‚ùå Erreur de syntaxe dans l'API"
    }
} catch {
    $warnings += "‚ö†Ô∏è Impossible de tester la syntaxe"
}

# V√©rifier Vercel CLI
Write-Host "üõ†Ô∏è V√©rification de Vercel CLI..." -ForegroundColor Yellow

if (Get-Command "vercel" -ErrorAction SilentlyContinue) {
    $vercelVersion = vercel --version
    Write-Host "‚úÖ Vercel CLI install√©: $vercelVersion" -ForegroundColor Green
} else {
    $warnings += "‚ö†Ô∏è Vercel CLI non install√© - Installez avec: npm install -g vercel"
}

# R√©sum√© des r√©sultats
Write-Host "`nüìä R√âSUM√â DE LA V√âRIFICATION" -ForegroundColor White -BackgroundColor Blue

if ($errors.Count -eq 0) {
    Write-Host "`nüéâ PR√äT POUR LE D√âPLOIEMENT !" -ForegroundColor Green -BackgroundColor Black
    Write-Host "Vous pouvez lancer le d√©ploiement avec: .\deploy-vercel-optimized.ps1" -ForegroundColor Cyan
} else {
    Write-Host "`n‚ùå ERREURS √Ä CORRIGER AVANT LE D√âPLOIEMENT :" -ForegroundColor Red
    foreach ($errorMsg in $errors) {
        Write-Host $errorMsg -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è AVERTISSEMENTS (recommandations) :" -ForegroundColor Yellow
    foreach ($warningMsg in $warnings) {
        Write-Host $warningMsg -ForegroundColor Yellow
    }
}

Write-Host "`nüìà Statistiques :" -ForegroundColor White
Write-Host "  - Erreurs critiques: $($errors.Count)" -ForegroundColor $(if ($errors.Count -eq 0) { "Green" } else { "Red" })
Write-Host "  - Avertissements: $($warnings.Count)" -ForegroundColor Yellow
Write-Host "  - Fichiers v√©rifi√©s: $($requiredFiles.Count)" -ForegroundColor Cyan

if ($errors.Count -eq 0) {
    exit 0
} else {
    exit 1
}

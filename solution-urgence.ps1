# Solution d'urgence - Cr√©er un nouveau projet public
Write-Host "üö® SOLUTION D'URGENCE - NOUVEAU PROJET PUBLIC" -ForegroundColor Red
Write-Host "=============================================" -ForegroundColor Yellow

Write-Host "`nüìä CONSTAT:" -ForegroundColor Red
Write-Host "Le projet actuel reste priv√© malgr√© les tentatives" -ForegroundColor White
Write-Host "Tous les tests retournent 401 Unauthorized" -ForegroundColor White

Write-Host "`nüéØ SOLUTION RADICALE:" -ForegroundColor Green
Write-Host "Cr√©er un NOUVEAU projet avec un nom diff√©rent, public d√®s le d√©part" -ForegroundColor White

Write-Host "`nüîß √âTAPES AUTOMATIS√âES:" -ForegroundColor Yellow

# √âtape 1: Supprimer la configuration actuelle
Write-Host "`n1. üßπ Nettoyage de la configuration actuelle..." -ForegroundColor Cyan
Remove-Item -Path ".vercel" -Recurse -Force -ErrorAction SilentlyContinue
Write-Host "   ‚úÖ Dossier .vercel supprim√©" -ForegroundColor Green

# √âtape 2: Modifier le nom du projet pour √©viter les conflits
Write-Host "`n2. üìù Modification du nom du projet..." -ForegroundColor Cyan
$newProjectName = "tw-pascal-public-$(Get-Date -Format 'MMdd-HHmm')"
Write-Host "   üìã Nouveau nom: $newProjectName" -ForegroundColor White

# Modifier vercel.json
if (Test-Path "vercel.json") {
    try {
        $vercelConfig = Get-Content "vercel.json" | ConvertFrom-Json
        $vercelConfig.name = $newProjectName
        $vercelConfig | ConvertTo-Json -Depth 10 | Set-Content "vercel.json"
        Write-Host "   ‚úÖ vercel.json mis √† jour avec le nouveau nom" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ö†Ô∏è  Erreur lors de la modification de vercel.json" -ForegroundColor Yellow
    }
}

# √âtape 3: Cr√©er un nouveau d√©ploiement
Write-Host "`n3. üöÄ Cr√©ation du nouveau projet public..." -ForegroundColor Cyan
try {
    # Forcer un nouveau d√©ploiement
    $deployResult = vercel --prod --yes --force 2>&1
    
    Write-Host "   üì§ D√©ploiement en cours..." -ForegroundColor Yellow
    Write-Host $deployResult -ForegroundColor Gray
    
    if ($deployResult -like "*deployed*" -or $deployResult -like "*success*") {
        Write-Host "   ‚úÖ Nouveau projet d√©ploy√©!" -ForegroundColor Green
        
        # Extraire la nouvelle URL
        $urls = $deployResult | Select-String -Pattern "https://.*\.vercel\.app" -AllMatches
        $newUrl = $urls | Select-Object -First 1 | ForEach-Object { $_.Matches.Value }
        
        if ($newUrl) {
            Write-Host "   üåê Nouvelle URL: $newUrl" -ForegroundColor Cyan
            
            # Sauvegarder la nouvelle URL
            $newUrl | Out-File -FilePath "NOUVELLE_URL_PUBLIC.txt" -Encoding UTF8
            Write-Host "   üíæ URL sauvegard√©e dans NOUVELLE_URL_PUBLIC.txt" -ForegroundColor Green
            
            # Test imm√©diat
            Write-Host "`n4. üß™ Test imm√©diat du nouveau projet..." -ForegroundColor Cyan
            Start-Sleep -Seconds 5
            
            try {
                $testResponse = Invoke-WebRequest -Uri $newUrl -UseBasicParsing -TimeoutSec 15
                
                if ($testResponse.StatusCode -eq 200) {
                    Write-Host "   üéâ SUCC√àS! Nouveau projet accessible publiquement!" -ForegroundColor Green
                    Write-Host "   ‚úÖ Status: $($testResponse.StatusCode)" -ForegroundColor Green
                    
                    # Test API
                    try {
                        $apiTest = Invoke-WebRequest -Uri "$newUrl/api/health" -UseBasicParsing -TimeoutSec 10
                        Write-Host "   ‚úÖ API Health: $($apiTest.StatusCode)" -ForegroundColor Green
                    } catch {
                        Write-Host "   ‚ö†Ô∏è  API: En cours de d√©marrage..." -ForegroundColor Yellow
                    }
                    
                } else {
                    Write-Host "   ‚ö†Ô∏è  Status: $($testResponse.StatusCode)" -ForegroundColor Yellow
                }
                
            } catch {
                $statusCode = $_.Exception.Response.StatusCode.value__
                if ($statusCode -eq 401) {
                    Write-Host "   ‚ùå Encore 401 - Probl√®me persistant" -ForegroundColor Red
                } else {
                    Write-Host "   ‚ö†Ô∏è  Test: $statusCode" -ForegroundColor Yellow
                }
            }
        }
        
    } else {
        Write-Host "   ‚ùå Erreur de d√©ploiement:" -ForegroundColor Red
        Write-Host $deployResult -ForegroundColor Red
    }
    
} catch {
    Write-Host "   ‚ùå Erreur critique: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã R√âSUM√â:" -ForegroundColor Yellow
Write-Host "=========" -ForegroundColor Yellow

if (Test-Path "NOUVELLE_URL_PUBLIC.txt") {
    $savedUrl = Get-Content "NOUVELLE_URL_PUBLIC.txt"
    Write-Host "‚úÖ Nouveau projet cr√©√©: $savedUrl" -ForegroundColor Green
    Write-Host "üéØ Testez cette URL dans votre navigateur" -ForegroundColor Cyan
} else {
    Write-Host "‚ö†Ô∏è  Nouveau projet en cours de cr√©ation" -ForegroundColor Yellow
    Write-Host "üîÑ V√©rifiez le dashboard Vercel: https://vercel.com/dashboard" -ForegroundColor Cyan
}

Write-Host "`nüîó ALTERNATIVES SI N√âCESSAIRE:" -ForegroundColor Yellow
Write-Host "1. V√©rifiez le dashboard: https://vercel.com/dashboard" -ForegroundColor Cyan
Write-Host "2. Cherchez le projet: $newProjectName" -ForegroundColor Cyan
Write-Host "3. Configurez-le comme public manuellement" -ForegroundColor Cyan

Write-Host "`n‚ú® Script termin√©!" -ForegroundColor Green
